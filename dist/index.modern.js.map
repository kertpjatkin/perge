{"version":3,"file":"index.modern.js","sources":["../src/index.ts"],"sourcesContent":["import Peer from 'peerjs'\nimport * as Automerge from 'automerge'\n\nexport interface PergeConfig<T> {\n  decode?: (msg: string) => any\n  encode?: (msg: any) => string\n  peerInstance?: Peer\n  docSet?: Automerge.DocSet<T>\n}\n\ntype DocHandler<T> = (doc: Automerge.Doc<T>) => void\n\nexport default class Perge<T> {\n  private _connections: { [id: string]: Automerge.Connection<T> } = {}\n\n  private _actorId: string\n  private _docSet: Automerge.DocSet<T>\n  private _peerInstance: Peer\n  private _encode: (msg: any) => string\n  private _decode: (msg: string) => any\n\n  constructor(actorId: string, config: PergeConfig<T> = {}) {\n    this._actorId = actorId\n    this._peerInstance = config.peerInstance || new Peer(this._actorId)\n    this._docSet = config.docSet || new Automerge.DocSet()\n    this._encode = config.encode || JSON.stringify\n    this._decode = config.decode || JSON.parse\n    this._peerInstance.on('connection', conn => {\n      conn.on('data', msg => {\n        this._connections[conn.peer].receiveMsg(this._decode(msg))\n      })\n    })\n  }\n\n  public get docSet() {\n    return this._docSet\n  }\n\n  public connect(id: string, conn?: Peer.DataConnection): void {\n    if (this._connections[id]) return\n    console.log(id, conn)\n    const peer = conn || this._peerInstance.connect(id)\n    const connection = this._connections[id] = new Automerge.Connection(this._docSet, msg => {\n      peer.send(this._encode(msg))\n    })\n    peer.on('disconnected', () => {\n      connection.close()\n      delete this._connections[id]\n    })\n    connection.open()\n  }\n\n  public select(id: string): (fn: Function, ...args: any[]) => Automerge.Doc<T> {\n    const doc = this.docSet.getDoc(id) || Automerge.init(this._actorId)\n    return (fn: Function, ...args: any[]): Automerge.Doc<T> => {\n      const newDoc = fn(doc, ...args)\n      this.docSet.setDoc(id, newDoc)\n      return newDoc\n    }\n  }\n\n  public subscribe(idOrSetHandler: string | Automerge.DocSetHandler<T>, docHandler?: DocHandler<T>): () => void {\n    if (typeof idOrSetHandler === 'function') {\n      this.docSet.registerHandler(idOrSetHandler)\n      return () => this.docSet.unregisterHandler(idOrSetHandler)\n    }\n    if (typeof idOrSetHandler === 'string') {\n      const handler = (docId: string, doc: Automerge.Doc<T>) => {\n        if (docId === idOrSetHandler) docHandler(doc)\n      }\n      this.docSet.registerHandler(handler)\n      return () => this.docSet.unregisterHandler(handler)\n    }\n  }\n}\n"],"names":["constructor","actorId","config","this","_actorId","_peerInstance","peerInstance","Peer","_docSet","docSet","Automerge","_encode","encode","JSON","stringify","_decode","decode","parse","on","conn","msg","_connections","peer","receiveMsg","connect","id","console","log","connection","send","close","open","select","doc","getDoc","fn","args","newDoc","setDoc","subscribe","idOrSetHandler","docHandler","registerHandler","unregisterHandler","handler","docId"],"mappings":"wGAqBEA,YAAYC,EAAiBC,EAAyB,IAR9CC,kBAA0D,GAShEA,KAAKC,SAAWH,EAChBE,KAAKE,cAAgBH,EAAOI,cAAgB,IAAIC,EAAKJ,KAAKC,UAC1DD,KAAKK,QAAUN,EAAOO,QAAU,IAAIC,EACpCP,KAAKQ,QAAUT,EAAOU,QAAUC,KAAKC,UACrCX,KAAKY,QAAUb,EAAOc,QAAUH,KAAKI,MACrCd,KAAKE,cAAca,GAAG,aAAcC,IAClCA,EAAKD,GAAG,OAAQE,IACdjB,KAAKkB,aAAaF,EAAKG,MAAMC,WAAWpB,KAAKY,QAAQK,QAK3DX,aACE,YAAYD,QAGPgB,QAAQC,EAAYN,GACzB,GAAIhB,KAAKkB,aAAaI,GAAK,OAC3BC,QAAQC,IAAIF,EAAIN,GAChB,MAAMG,EAAOH,GAAQhB,KAAKE,cAAcmB,QAAQC,GAC1CG,EAAazB,KAAKkB,aAAaI,GAAM,IAAIf,EAAqBP,KAAKK,QAASY,IAChFE,EAAKO,KAAK1B,KAAKQ,QAAQS,MAEzBE,EAAKJ,GAAG,eAAgB,KACtBU,EAAWE,oBACCT,aAAaI,KAE3BG,EAAWG,OAGNC,OAAOP,GACZ,MAAMQ,EAAM9B,KAAKM,OAAOyB,OAAOT,IAAOf,EAAeP,KAAKC,UAC1D,MAAO,CAAC+B,KAAiBC,KACvB,MAAMC,EAASF,EAAGF,KAAQG,GAE1B,OADAjC,KAAKM,OAAO6B,OAAOb,EAAIY,GAChBA,GAIJE,UAAUC,EAAqDC,GACpE,GAA8B,mBAAnBD,EAET,OADArC,KAAKM,OAAOiC,gBAAgBF,GACrB,IAAMrC,KAAKM,OAAOkC,kBAAkBH,GAE7C,GAA8B,iBAAnBA,EAA6B,CACtC,MAAMI,EAAU,CAACC,EAAeZ,KAC1BY,IAAUL,GAAgBC,EAAWR,IAG3C,OADA9B,KAAKM,OAAOiC,gBAAgBE,GACrB,IAAMzC,KAAKM,OAAOkC,kBAAkBC"}