{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import Peer from 'peerjs'\nimport * as Automerge from 'automerge'\n\nexport interface PergeConfig<T> {\n  decode?: (msg: string) => any\n  encode?: (msg: any) => string\n  peerInstance?: Peer\n  docSet?: Automerge.DocSet<T>\n}\n\ntype DocHandler<T> = (doc: Automerge.Doc<T>) => void\n\nexport default class Perge<T> {\n  private _connections: { [id: string]: Automerge.Connection<T> } = {}\n\n  private _actorId: string\n  private _docSet: Automerge.DocSet<T>\n  private _peerInstance: Peer\n  private _encode: (msg: any) => string\n  private _decode: (msg: string) => any\n\n  constructor(actorId: string, config: PergeConfig<T> = {}) {\n    this._actorId = actorId\n    this._peerInstance = config.peerInstance || new Peer(this._actorId)\n    this._docSet = config.docSet || new Automerge.DocSet()\n    this._encode = config.encode || JSON.stringify\n    this._decode = config.decode || JSON.parse\n    this._peerInstance.on('connection', conn => {\n      conn.on('data', msg => {\n        this._connections[conn.peer].receiveMsg(this._decode(msg))\n      })\n    })\n  }\n\n  public get docSet() {\n    return this._docSet\n  }\n\n  public connect(id: string, conn?: Peer.DataConnection): void {\n    if (this._connections[id]) return\n    console.log(id, conn)\n    const peer = conn || this._peerInstance.connect(id)\n    const connection = this._connections[id] = new Automerge.Connection(this._docSet, msg => {\n      peer.send(this._encode(msg))\n    })\n    peer.on('disconnected', () => {\n      connection.close()\n      delete this._connections[id]\n    })\n    connection.open()\n  }\n\n  public select(id: string): (fn: Function, ...args: any[]) => Automerge.Doc<T> {\n    const doc = this.docSet.getDoc(id) || Automerge.init(this._actorId)\n    return (fn: Function, ...args: any[]): Automerge.Doc<T> => {\n      const newDoc = fn(doc, ...args)\n      this.docSet.setDoc(id, newDoc)\n      return newDoc\n    }\n  }\n\n  public subscribe(idOrSetHandler: string | Automerge.DocSetHandler<T>, docHandler?: DocHandler<T>): () => void {\n    if (typeof idOrSetHandler === 'function') {\n      this.docSet.registerHandler(idOrSetHandler)\n      return () => this.docSet.unregisterHandler(idOrSetHandler)\n    }\n    if (typeof idOrSetHandler === 'string') {\n      const handler = (docId: string, doc: Automerge.Doc<T>) => {\n        if (docId === idOrSetHandler) docHandler(doc)\n      }\n      this.docSet.registerHandler(handler)\n      return () => this.docSet.unregisterHandler(handler)\n    }\n  }\n}\n"],"names":["actorId","config","this","_actorId","_peerInstance","peerInstance","Peer","_docSet","docSet","Automerge","_encode","encode","JSON","stringify","_decode","decode","parse","on","conn","msg","_this2","_connections","peer","receiveMsg","connect","id","console","log","connection","send","_this3","close","open","select","doc","getDoc","fn","newDoc","_this","setDoc","subscribe","idOrSetHandler","docHandler","registerHandler","_this4","unregisterHandler","handler","docId"],"mappings":"uVAqBE,WAAYA,EAAiBC,uBAAAA,IAAAA,EAAyB,IAR9CC,kBAA0D,GAShEA,KAAKC,SAAWH,EAChBE,KAAKE,cAAgBH,EAAOI,cAAgB,IAAIC,EAAKJ,KAAKC,UAC1DD,KAAKK,QAAUN,EAAOO,QAAU,IAAIC,SACpCP,KAAKQ,QAAUT,EAAOU,QAAUC,KAAKC,UACrCX,KAAKY,QAAUb,EAAOc,QAAUH,KAAKI,MACrCd,KAAKE,cAAca,GAAG,aAAc,SAAAC,GAClCA,EAAKD,GAAG,OAAQ,SAAAE,GACdC,EAAKC,aAAaH,EAAKI,MAAMC,WAAWH,EAAKN,QAAQK,qCASpDK,QAAA,SAAQC,EAAYP,cACzB,IAAIhB,KAAKmB,aAAaI,GAAtB,CACAC,QAAQC,IAAIF,EAAIP,GAChB,IAAMI,EAAOJ,GAAQhB,KAAKE,cAAcoB,QAAQC,GAC1CG,EAAa1B,KAAKmB,aAAaI,GAAM,IAAIhB,aAAqBP,KAAKK,QAAS,SAAAY,GAChFG,EAAKO,KAAKC,EAAKpB,QAAQS,MAEzBG,EAAKL,GAAG,eAAgB,WACtBW,EAAWG,eACJD,EAAKT,aAAaI,KAE3BG,EAAWI,WAGNC,OAAA,SAAOR,cACNS,EAAMhC,KAAKM,OAAO2B,OAAOV,IAAOhB,OAAeP,KAAKC,UAC1D,gBAAQiC,GACN,IAAMC,EAASD,gBAAGF,uCAElB,OADAI,EAAK9B,OAAO+B,OAAOd,EAAIY,GAChBA,MAIJG,UAAA,SAAUC,EAAqDC,cACpE,GAA8B,mBAAnBD,EAET,OADAvC,KAAKM,OAAOmC,gBAAgBF,qBACfG,EAAKpC,OAAOqC,kBAAkBJ,IAE7C,GAA8B,iBAAnBA,EAA6B,CACtC,IAAMK,EAAU,SAACC,EAAeb,GAC1Ba,IAAUN,GAAgBC,EAAWR,IAG3C,OADAhC,KAAKM,OAAOmC,gBAAgBG,qBACfF,EAAKpC,OAAOqC,kBAAkBC,uCApC7C,YAAYvC"}