{"version":3,"file":"index.umd.js","sources":["../src/index.ts"],"sourcesContent":["import Peer from 'peerjs'\nimport { init, Connection, DocSet, Doc, ChangeFn, DocSetHandler, change, undo, redo } from 'automerge'\n\ntype AutomergeUpdateMethod = typeof change | typeof undo | typeof redo\n\nexport interface PergeConfig {\n  decode?: (msg: string) => any\n  encode?: (msg: any) => string\n  peer?: Peer\n  docSet?: DocSet<any>\n}\n\nexport default class Perge {\n  readonly peer: Peer\n  readonly docSet: DocSet<any>\n\n  private _connections: { [id: string]: Connection<any> } = {}\n  private _actorId: string\n  private _encode: (msg: any) => string\n  private _decode: (msg: string) => any\n\n  constructor(actorId: string, config: PergeConfig = {}) {\n    this._actorId = actorId\n    this.peer = config.peer || new Peer(this._actorId)\n    this.docSet = config.docSet || new DocSet()\n    this._encode = config.encode || JSON.stringify\n    this._decode = config.decode || JSON.parse\n    this.peer.on('connection', conn => {\n      conn.on('data', msg => {\n        this._connections[conn.peer].receiveMsg(this._decode(msg))\n      })\n    })\n  }\n\n  public connect(id: string, conn?: Peer.DataConnection): Peer.DataConnection {\n    if (this._connections[id]) return this.peer.connections[id]\n    const peer = conn || this.peer.connect(id)\n    const connection = this._connections[id] = new Connection(this.docSet, msg => {\n      peer.send(this._encode(msg))\n    })\n    peer.on('disconnected', () => {\n      connection.close()\n      delete this._connections[id]\n    })\n    connection.open()\n    return peer\n  }\n\n  public get<T>(id: string): Doc<T> {\n    return this.docSet.getDoc(id) || init(this._actorId)\n  }\n\n  public select<T>(id: string): (changeMethod: AutomergeUpdateMethod, ...args: any[]) => Doc<T> {\n    return (changeMethod: Function, ...args: any[]): Doc<T> => {\n      const newDoc = changeMethod(this.get(id), ...args)\n      this.docSet.setDoc(id, newDoc)\n      return newDoc\n    }\n  }\n\n  public subscribe<T>(idOrSetHandler: string | DocSetHandler<T>, callback?: ChangeFn<T>): () => void {\n    if (typeof idOrSetHandler === 'function') {\n      this.docSet.registerHandler(idOrSetHandler)\n      return () => this.docSet.unregisterHandler(idOrSetHandler)\n    }\n    if (typeof idOrSetHandler === 'string' && !!callback) {\n      const handler = (docId: string, doc: T) => {\n        if (docId === idOrSetHandler) callback(doc)\n      }\n      this.docSet.registerHandler(handler)\n      return () => this.docSet.unregisterHandler(handler)\n    }\n    return () => { }\n  }\n}\n"],"names":["actorId","config","this","_actorId","peer","Peer","docSet","DocSet","_encode","encode","JSON","stringify","_decode","decode","parse","on","conn","msg","_this2","_connections","receiveMsg","connect","id","connections","connection","Connection","send","_this3","close","open","get","getDoc","init","select","changeMethod","newDoc","_this","setDoc","subscribe","idOrSetHandler","callback","registerHandler","_this4","unregisterHandler","handler","docId","doc"],"mappings":"uVAqBE,WAAYA,EAAiBC,uBAAAA,IAAAA,EAAsB,IAL3CC,kBAAkD,GAMxDA,KAAKC,SAAWH,EAChBE,KAAKE,KAAOH,EAAOG,MAAQ,IAAIC,EAAKH,KAAKC,UACzCD,KAAKI,OAASL,EAAOK,QAAU,IAAIC,SACnCL,KAAKM,QAAUP,EAAOQ,QAAUC,KAAKC,UACrCT,KAAKU,QAAUX,EAAOY,QAAUH,KAAKI,MACrCZ,KAAKE,KAAKW,GAAG,aAAc,SAAAC,GACzBA,EAAKD,GAAG,OAAQ,SAAAE,GACdC,EAAKC,aAAaH,EAAKZ,MAAMgB,WAAWF,EAAKN,QAAQK,mCAKpDI,QAAA,SAAQC,EAAYN,cACzB,GAAId,KAAKiB,aAAaG,GAAK,YAAYlB,KAAKmB,YAAYD,GACxD,IAAMlB,EAAOY,GAAQd,KAAKE,KAAKiB,QAAQC,GACjCE,EAAatB,KAAKiB,aAAaG,GAAM,IAAIG,aAAWvB,KAAKI,OAAQ,SAAAW,GACrEb,EAAKsB,KAAKC,EAAKnB,QAAQS,MAOzB,OALAb,EAAKW,GAAG,eAAgB,WACtBS,EAAWI,eACJD,EAAKR,aAAaG,KAE3BE,EAAWK,OACJzB,KAGF0B,IAAA,SAAOR,GACZ,YAAYhB,OAAOyB,OAAOT,IAAOU,OAAK9B,KAAKC,aAGtC8B,OAAA,SAAUX,cACf,gBAAQY,GACN,IAAMC,EAASD,gBAAaE,EAAKN,IAAIR,wCAErC,OADAc,EAAK9B,OAAO+B,OAAOf,EAAIa,GAChBA,MAIJG,UAAA,SAAaC,EAA2CC,cAC7D,GAA8B,mBAAnBD,EAET,OADArC,KAAKI,OAAOmC,gBAAgBF,qBACfG,EAAKpC,OAAOqC,kBAAkBJ,IAE7C,GAA8B,iBAAnBA,GAAiCC,EAAU,CACpD,IAAMI,EAAU,SAACC,EAAeC,GAC1BD,IAAUN,GAAgBC,EAASM,IAGzC,OADA5C,KAAKI,OAAOmC,gBAAgBG,qBACfF,EAAKpC,OAAOqC,kBAAkBC,IAE7C"}